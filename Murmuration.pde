/* Nina Boelsums
Creative Programming Challenge 1

This code is an attempt to simulate the behaviour of birds flying in unison 
and creating rippling, swirling patterns called murmurations.

These patterns are a result of a birds individual behaviour, 
which is to fly exactly the same as its neighbour. 
When a bird makes a small deviation in direction,
it is copied by its neighbours.  
The result is that any small changes are magnified by thousands of birds. 

*/

import processing.pdf.*; //Library needed for exporting a PDF file
boolean record; // Later used to start or stop recording

//Creates an array consisting of Boid objects
Boid[] boids = new Boid[3000]; 
 
void setup(){
  
  size( 1000, 500, P3D );// Creates a 3D environment 
  frameRate( 30 );
 
  
  for( int i = 0; i < boids.length; i++ ){ 
    //Fill the array with new objects generated by the Boid value
    boids[i] = new Boid();       
  }
 
  noStroke();
  smooth();
  
  fill(82,82,82);
 
}
 
void draw(){
  
  if (record){ //Indicates from where recording should start
   beginRaw(PDF,"frame3000kleiner-####.pdf");
  }
 
  
  background(181,211,222);//Sky-blue background
  
  lights();//Sunset-like orange light shining on the boids' wings
  directionalLight(252,127,0,0,height/2,0);
 
 
  
//Choose a random value for later random deviations in the birds' directions
// The higher the value, the smaller the chance that a deviation occurs.
  int chance = 100;
  // Each coordinate has the same chance of changing
  float randx=random(-chance-2,chance+2); 
  float randy=random(-chance-2,chance+2);
  float randz=random(-chance-2,chance+2);

//Picks a random boid to make a random change in direction  
  int WeirdBoid = int(random(0,boids.length));
  boids[WeirdBoid].thatWeirdBoid(randx, randy, randz, chance);

//Lets all boids, except the WeirdBoid, behave the same
    for (int i=0; i<WeirdBoid; i++){
     boids[i].thatConformistBoid();   
      }
    for (int i=WeirdBoid+1; i<boids.length; i++){  
      boids[i].thatConformistBoid();}
  
    
 if (record){ //Indicates where recording should end
 endRaw();
 record = false;
  }

}
// When the mouse is pressed, a snapshot is made and exported as pdf
void mousePressed() { 
  record = true;
}